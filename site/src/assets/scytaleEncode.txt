#-------------------------------------------------------------------------------
# Name:        scytaleEncode
# Purpose:
#
# Author:      Seb
#
# Created:     04/02/2018
# Copyright:   (c) Seb 2018
#-------------------------------------------------------------------------------

# On met le message dans la variable "message" puis on le décode et on le met en majuscule.
message = input("message a coder ")
message = message.upper()
# On indique à l'utilisateur le nombre de clés possibles
print ("\n" + str(len(message)/2) + " possibilitees de cles.")
# On choisit une clé
key = int(input("cle"))
# On recrée nos colonnes, mais en créeant une liste avec autant d'éléments que la clé.
# Chaque élément est pour l'instant du texte vide.
crypted = [''] * key
# On lance une boucle qui va se répéter pour chaque colonnes
for col in range(key):
	# On crée une variable "pointer" qui va nous permettre d'avance de caractère en caractère dans notre message.
	pointer = col
	# Tant que "pointer" est plus petit que le nombre de caractères dans le texte, la boucle continuera à tourner.
	while pointer < len(message):

# On ajoute dans les colonnes les caractères un a un, mais dans un ordre
# particulier. Par exemple, on va chercher le premier caractère, on le met dans
# la premiere colonne, puis on va chercher le caractère qui se trouve "cle"
# caractères plus loin, pour le mettre encore une fois dans la premiere colonne,
# et ainsi de suite. Pour la 2ème colonne, on commencera avec le deuxième
# caractère, puis avec le caractère qui est "cle" caractères plus loin, etc.

		crypted[col] += message[pointer]
		pointer += key
# Et finalement, on affiche a l'écran le texte crypté!
print ("\n*** Texte crypte! ***")
print (''.join(crypted) + '|\n')
